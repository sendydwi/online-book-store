// Code generated by MockGen. DO NOT EDIT.
// Source: ./services/order/service.go
//
// Generated by this command:
//
//	mockgen -source=./services/order/service.go -destination=./services/order/mock/service.go
//

// Package mock_order is a generated GoMock package.
package mock_order

import (
	reflect "reflect"

	apiorder "github.com/sendydwi/online-book-store/api/order"
	gomock "go.uber.org/mock/gomock"
)

// MockOrderServiceInterface is a mock of OrderServiceInterface interface.
type MockOrderServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOrderServiceInterfaceMockRecorder
}

// MockOrderServiceInterfaceMockRecorder is the mock recorder for MockOrderServiceInterface.
type MockOrderServiceInterfaceMockRecorder struct {
	mock *MockOrderServiceInterface
}

// NewMockOrderServiceInterface creates a new mock instance.
func NewMockOrderServiceInterface(ctrl *gomock.Controller) *MockOrderServiceInterface {
	mock := &MockOrderServiceInterface{ctrl: ctrl}
	mock.recorder = &MockOrderServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderServiceInterface) EXPECT() *MockOrderServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderServiceInterface) CreateOrder(userId string, request apiorder.CreateOrderRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", userId, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderServiceInterfaceMockRecorder) CreateOrder(userId, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderServiceInterface)(nil).CreateOrder), userId, request)
}

// GetOrderDetail mocks base method.
func (m *MockOrderServiceInterface) GetOrderDetail(orderid, userId string) (*apiorder.GetOrderDetailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderDetail", orderid, userId)
	ret0, _ := ret[0].(*apiorder.GetOrderDetailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderDetail indicates an expected call of GetOrderDetail.
func (mr *MockOrderServiceInterfaceMockRecorder) GetOrderDetail(orderid, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderDetail", reflect.TypeOf((*MockOrderServiceInterface)(nil).GetOrderDetail), orderid, userId)
}

// GetOrderHistories mocks base method.
func (m *MockOrderServiceInterface) GetOrderHistories(userId string, page, limit int) (*apiorder.GetOrderHistoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderHistories", userId, page, limit)
	ret0, _ := ret[0].(*apiorder.GetOrderHistoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderHistories indicates an expected call of GetOrderHistories.
func (mr *MockOrderServiceInterfaceMockRecorder) GetOrderHistories(userId, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderHistories", reflect.TypeOf((*MockOrderServiceInterface)(nil).GetOrderHistories), userId, page, limit)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ./services/cart/repository.go
//
// Generated by this command:
//
//	mockgen -source=./services/cart/repository.go -destination=./services/cart/mock/repository.go
//

// Package mock_cart is a generated GoMock package.
package mock_cart

import (
	reflect "reflect"

	entity "github.com/sendydwi/online-book-store/services/cart/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockCartRepositoryInterface is a mock of CartRepositoryInterface interface.
type MockCartRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCartRepositoryInterfaceMockRecorder
}

// MockCartRepositoryInterfaceMockRecorder is the mock recorder for MockCartRepositoryInterface.
type MockCartRepositoryInterfaceMockRecorder struct {
	mock *MockCartRepositoryInterface
}

// NewMockCartRepositoryInterface creates a new mock instance.
func NewMockCartRepositoryInterface(ctrl *gomock.Controller) *MockCartRepositoryInterface {
	mock := &MockCartRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockCartRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartRepositoryInterface) EXPECT() *MockCartRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateActiveCart mocks base method.
func (m *MockCartRepositoryInterface) CreateActiveCart(cart entity.Cart) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActiveCart", cart)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateActiveCart indicates an expected call of CreateActiveCart.
func (mr *MockCartRepositoryInterfaceMockRecorder) CreateActiveCart(cart any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActiveCart", reflect.TypeOf((*MockCartRepositoryInterface)(nil).CreateActiveCart), cart)
}

// GetCartItemByCartId mocks base method.
func (m *MockCartRepositoryInterface) GetCartItemByCartId(cartId string) ([]entity.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartItemByCartId", cartId)
	ret0, _ := ret[0].([]entity.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartItemByCartId indicates an expected call of GetCartItemByCartId.
func (mr *MockCartRepositoryInterfaceMockRecorder) GetCartItemByCartId(cartId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartItemByCartId", reflect.TypeOf((*MockCartRepositoryInterface)(nil).GetCartItemByCartId), cartId)
}

// GetCurrentActiveCart mocks base method.
func (m *MockCartRepositoryInterface) GetCurrentActiveCart(userId string) (*entity.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentActiveCart", userId)
	ret0, _ := ret[0].(*entity.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentActiveCart indicates an expected call of GetCurrentActiveCart.
func (mr *MockCartRepositoryInterfaceMockRecorder) GetCurrentActiveCart(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentActiveCart", reflect.TypeOf((*MockCartRepositoryInterface)(nil).GetCurrentActiveCart), userId)
}

// UpdateCartItem mocks base method.
func (m *MockCartRepositoryInterface) UpdateCartItem(cartItem entity.CartItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCartItem", cartItem)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCartItem indicates an expected call of UpdateCartItem.
func (mr *MockCartRepositoryInterfaceMockRecorder) UpdateCartItem(cartItem any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCartItem", reflect.TypeOf((*MockCartRepositoryInterface)(nil).UpdateCartItem), cartItem)
}

// UpdateCartStatus mocks base method.
func (m *MockCartRepositoryInterface) UpdateCartStatus(cart entity.Cart) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCartStatus", cart)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCartStatus indicates an expected call of UpdateCartStatus.
func (mr *MockCartRepositoryInterfaceMockRecorder) UpdateCartStatus(cart any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCartStatus", reflect.TypeOf((*MockCartRepositoryInterface)(nil).UpdateCartStatus), cart)
}
